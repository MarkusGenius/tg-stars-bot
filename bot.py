import asyncio
import hashlib
import logging
import os
from datetime import datetime
from urllib.parse import urlencode
import re
import threading

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from flask import Flask, request, jsonify

# ==========================
# –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–ò –ö–û–ù–°–¢–ê–ù–¢–´
# ==========================
BOT_TOKEN = "8477520204:AAGoSYaKCC4_s_OWvAdcdJVY4JbrM3r3Zhk"
ADMIN_ID = 8127196287
BOT_USERNAME = "Zvezda_TON_bot"

MERCHANT_ID = "20064a4e69197f528804edb0ee1e57c5"
SECRET_WORD_1 = "kk54FvRhT}*{PBm"  # –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –æ–ø–ª–∞—Ç—ã
SECRET_WORD_2 = "={XJytOz_=Jte&t"  # –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å "–ø–æ–¥–ø–∏—Å–∫–∏" (–∑–∞–∫–∞–∑-–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä) ‚Äî 200 ‚ÇΩ
FIXED_SUBSCRIPTION_RUB = 200

# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π –∫—É—Ä—Å (–¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
STAR_TO_RUB_RATE = 4.0

# –ü–æ—Ä—Ç –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ (Railway –∑–∞–¥–∞–µ—Ç PORT –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏)
PORT = int(os.getenv("PORT", "8080"))

# ==========================

logging.basicConfig(
	level=logging.INFO,
	format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π event loop –±–æ—Ç–∞ (–Ω—É–∂–µ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ Flask-–ø–æ—Ç–æ–∫–∞)
bot_loop: asyncio.AbstractEventLoop = None

class OrderStates(StatesGroup):
	waiting_for_recipient = State()
	waiting_for_payment = State()

# –ü–∞–º—è—Ç—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ (–∑–∞–º–µ–Ω–∏—Ç–µ –ë–î –≤ –ø—Ä–æ–¥–µ)
orders_db = {}
pending_payments = {}

def check_username_exists(username: str) -> bool:
	"""–§–æ—Ä–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ username –ø–æ —à–∞–±–ª–æ–Ω—É.
	–§–∞–∫—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç —Å–¥–µ–ª–∞—Ç—å –Ω–µ –º–æ–∂–µ—Ç (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ API).
	"""
	try:
		clean = username.replace("@", "")
		return re.match(r"^[a-zA-Z][a-zA-Z0-9_]{4,31}$", clean) is not None
	except Exception:
		return False

def generate_payment_link(amount_rub: int, order_id: str, user_id: int, username: str) -> str:
	"""–°—Å—ã–ª–∫–∞ –Ω–∞ Free-Kassa. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ–∂–µ—Ç –æ–ø–ª–∞—Ç–∏—Ç—å –°–ë–ü.
	–ï—Å–ª–∏ –Ω—É–∂–µ–Ω –ø—Ä–µ–¥–≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –°–ë–ü ‚Äî —É—Ç–æ—á–Ω–∏—Ç–µ —É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Free‚ÄëKassa –ø–∞—Ä–∞–º–µ—Ç—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, i=...).
	"""
	sign = hashlib.md5(f"{MERCHANT_ID}:{amount_rub}:{SECRET_WORD_1}:{order_id}".encode()).hexdigest()
	params = {
		"m": MERCHANT_ID,
		"oa": str(amount_rub),
		"o": order_id,
		"s": sign,
		"us_user_id": str(user_id),
		"us_username": username or "",
		# "i": "SBP_METHOD_ID",  # –µ—Å–ª–∏ Free‚ÄëKassa –¥–∞–µ—Ç id –º–µ—Ç–æ–¥–∞ –¥–ª—è –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ ‚Äî –¥–æ–±–∞–≤—å—Ç–µ
	}
	return f"https://pay.freekassa.ru/?{urlencode(params)}"

def verify_payment_signature(data: dict) -> bool:
	"""–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è Free‚ÄëKassa (SECRET_WORD_2)."""
	try:
		merchant_id = data.get("MERCHANT_ID")
		amount = data.get("AMOUNT")
		merchant_order_id = data.get("MERCHANT_ORDER_ID")
		sign = data.get("SIGN", "")

		expected_sign = hashlib.md5(
			f"{merchant_id}:{amount}:{SECRET_WORD_2}:{merchant_order_id}".encode()
		).hexdigest()

		return sign.upper() == expected_sign.upper()
	except Exception as e:
		logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏: {e}")
		return False

async def notify_payment_success(user_id: int, order_id: str) -> None:
	"""–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–¥–º–∏–Ω–∞ –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã 200 ‚ÇΩ –∏ –ø–µ—Ä–µ–¥–∞—á–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ Fragment –¥–ª—è –∞–¥–º–∏–Ω–∞."""
	try:
		order = orders_db.get(order_id)
		if not order:
			return

		# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		await bot.send_message(
			user_id,
			"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞! –û–∂–∏–¥–∞–π—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 5‚Äì10 –º–∏–Ω—É—Ç!\n"
			"–í–∞—à –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É."
		)

		# –ö–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∞
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(
			types.InlineKeyboardButton("‚úÖ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–∫–∞–∑", callback_data=f"process_{order_id}")
		)
		keyboard.add(
			types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"cancel_admin_{order_id}")
		)

		# –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É Stars –Ω–∞ Fragment (–∞–¥–º–∏–Ω –ø–æ–∫—É–ø–∞–µ—Ç –≤—Ä—É—á–Ω—É—é)
		fragment_url = f"https://fragment.com/stars/buy?recipient={order['recipient']}&quantity={order['stars_count']}"

		admin_text = (
			f"üîî –ù–æ–≤—ã–π –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑!\n\n"
			f"üìã ID –∑–∞–∫–∞–∑–∞: <code>{order_id}</code>\n"
			f"üë§ –ó–∞–∫–∞–∑—á–∏–∫: @{order['username']}\n"
			f"üéØ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: @{order['recipient']}\n"
			f"‚≠ê –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥: {order['stars_count']}\n"
			f"üí∞ –û–ø–ª–∞—á–µ–Ω–æ: {FIXED_SUBSCRIPTION_RUB} —Ä—É–±.\n"
			f"üìÖ –í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã: {order.get('paid_at', 'N/A')}\n\n"
			f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ Fragment –¥–ª—è –ø–æ–∫—É–ø–∫–∏:\n"
			f"<code>{fragment_url}</code>\n\n"
			f"–ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –Ω–∞–∂–º–∏—Ç–µ ‚Äú–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–∫–∞–∑‚Äù."
		)

		await bot.send_message(ADMIN_ID, admin_text, reply_markup=keyboard, parse_mode="HTML")

	except Exception as e:
		logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ–± –æ–ø–ª–∞—Ç–µ: {e}")

# ==========================
# Flask –º–∞—Ä—à—Ä—É—Ç—ã (–¥–ª—è Free‚ÄëKassa –∏ —Å—Ç–∞—Ç—É—Å–æ–≤)
# ==========================

@app.route("/webhook", methods=["POST"])
def webhook():
	"""Callback –æ—Ç Free‚ÄëKassa: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å, —Å—É–º–º—É (=200), —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ user_id –∏ –æ—Ç–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑."""
	try:
		data = request.form.to_dict()
		logging.info(f"Webhook Free‚ÄëKassa: {data}")

		if not verify_payment_signature(data):
			logging.error("–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞")
			return "ERROR", 400

		order_id = data.get("MERCHANT_ORDER_ID")
		amount = float(data.get("AMOUNT", "0"))
		user_id_from_cb = int(data.get("us_user_id", "0"))

		if amount < FIXED_SUBSCRIPTION_RUB:
			logging.error(f"–°—É–º–º–∞ –º–µ–Ω—å—à–µ —Ç—Ä–µ–±—É–µ–º–æ–π: {amount}")
			return "ERROR", 400

		if order_id not in orders_db:
			logging.error("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
			return "ERROR", 404

		order = orders_db[order_id]

		# –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ —Ç–æ–º—É –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–ª –∑–∞–∫–∞–∑
		if user_id_from_cb != order["user_id"]:
			logging.error("user_id –∏–∑ callback –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∞–≤—Ç–æ—Ä–æ–º –∑–∞–∫–∞–∑–∞")
			return "ERROR", 400

		order["status"] = "paid"
		order["paid_at"] = datetime.now().isoformat()

		# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ –ø–æ—Ç–æ–∫–∞ Flask –≤ —Ü–∏–∫–ª –±–æ—Ç–∞
		if bot_loop and bot_loop.is_running():
			asyncio.run_coroutine_threadsafe(
				notify_payment_success(order["user_id"], order_id),
				bot_loop
			)
		else:
			logging.error("–¶–∏–∫–ª –±–æ—Ç–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω ‚Äî –Ω–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

		return "YES"
	except Exception as e:
		logging.error(f"–û—à–∏–±–∫–∞ –≤ webhook: {e}")
		return "ERROR", 500

@app.route("/success.html")
def success_page():
	return f"""
	<!DOCTYPE html>
	<html>
	<head>
		<meta charset="UTF-8" />
		<meta http-equiv="refresh" content="3;url=https://t.me/{BOT_USERNAME}?start=success" />
		<title>–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞</title>
		<style>
			body {{ font-family: -apple-system,BlinkMacSystemFont,'Segoe UI',Arial,sans-serif; text-align:center; padding:48px; }}
			.success {{ color:#2ecc71; font-size:42px; margin-bottom:12px; }}
		</style>
	</head>
	<body>
		<div class="success">‚úÖ</div>
		<h1>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</h1>
		<p>–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...</p>
		<a href="https://t.me/{BOT_USERNAME}?start=success">–ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞ —Å–µ–π—á–∞—Å</a>
	</body>
	</html>
	"""

@app.route("/failed.html")
def failed_page():
	return f"""
	<!DOCTYPE html>
	<html>
	<head>
		<meta charset="UTF-8" />
		<meta http-equiv="refresh" content="3;url=https://t.me/{BOT_USERNAME}?start=failed" />
		<title>–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã</title>
		<style>
			body {{ font-family: -apple-system,BlinkMacSystemFont,'Segoe UI',Arial,sans-serif; text-align:center; padding:48px; }}
			.error {{ color:#e74c3c; font-size:42px; margin-bottom:12px; }}
		</style>
	</head>
	<body>
		<div class="error">‚ùå</div>
		<h1>–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã</h1>
		<p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</p>
		<p>–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...</p>
		<a href="https://t.me/{BOT_USERNAME}?start=failed">–ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞ —Å–µ–π—á–∞—Å</a>
	</body>
	</html>
	"""

@app.route("/")
def index():
	return jsonify({"status": "running", "message": "Telegram Stars Bot is running!", "version": "1.0"})

@app.route("/health")
def health():
	return jsonify({"status": "healthy"})

# ==========================
# Telegram –±–æ—Ç
# ==========================

@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message, state: FSMContext):
	args = message.get_args()

	if args == "success":
		await message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
		return
	elif args == "failed":
		await message.answer("‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
		return

	# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è username
	if not message.from_user.username:
		await message.answer(
			"‚ùå –£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç username –≤ Telegram!\n\n"
			"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:\n\n"
			"üì± –ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å username:\n"
			"1) –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram\n"
			"2) –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–≤–æ—ë –∏–º—è\n"
			"3) –í–≤–µ–¥–∏—Ç–µ username –≤ –ø–æ–ª–µ ¬´–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è¬ª\n"
			"4) –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ /start",
		)
		return

	await state.finish()

	welcome_text = (
		"üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!\n\n"
		"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∑–≤—ë–∑–¥—ã –ø–æ —á–∏—Å—Ç–æ–º—É –∫—É—Ä—Å—É –∏–ª–∏ –ø–æ–¥–∞—Ä–∏—Ç—å –∏—Ö —Å–≤–æ–µ–º—É –¥—Ä—É–≥—É!\n\n"
		f"üí± –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: 1 –∑–≤–µ–∑–¥–∞ = {STAR_TO_RUB_RATE} —Ä—É–±."
	)
	await message.answer(welcome_text)

	await OrderStates.waiting_for_recipient.set()
	await message.answer(
		"üìù –ù–∞–ø–∏—à–∏ —é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ —Å–∫–æ–ª—å–∫–æ –∑–≤—ë–∑–¥ —Ç—ã —Ö–æ—á–µ—à—å –µ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?\n"
		"–í —Ç–∞–∫–æ–º –≤–∏–¥–µ: <—é–∑–µ—Ä–Ω–µ–π–º> <—Ü–µ–ª–æ–µ –∫–æ–ª-–≤–æ –∑–≤—ë–∑–¥>\n\n"
		"–ü—Ä–∏–º–µ—Ä: @durov 50"
	)

@dp.message_handler(state=OrderStates.waiting_for_recipient)
async def process_recipient(message: types.Message, state: FSMContext):
	try:
		parts = message.text.strip().split()
		if len(parts) != 2:
			await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: @durov 50")
			return

		recipient_username = parts[0].replace("@", "")
		stars_count = int(parts[1])

		if stars_count <= 0:
			await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
			return

		if stars_count > 10000:
			await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∑–∞ —Ä–∞–∑: 10‚ÄØ000 –∑–≤—ë–∑–¥")
			return

		if not check_username_exists(recipient_username):
			await message.answer(
				"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username.\n"
				"–î–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –±—É–∫–≤—ã, 5‚Äì32 —Å–∏–º–≤–æ–ª–∞, –±—É–∫–≤—ã/—Ü–∏—Ñ—Ä—ã/–Ω–∏–∂–Ω–∏–µ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è."
			)
			return

		order_id = f"order_{message.from_user.id}_{int(datetime.now().timestamp())}"

		order_data = {
			"user_id": message.from_user.id,
			"username": message.from_user.username,
			"recipient": recipient_username,
			"stars_count": stars_count,
			"order_id": order_id,
			"status": "pending",
			"created_at": datetime.now().isoformat()
		}

		orders_db[order_id] = order_data
		pending_payments[message.from_user.id] = order_data

		# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É 200 ‚ÇΩ (–°–ë–ü –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –∫–∞—Å—Å–µ Free‚ÄëKassa)
		payment_link = generate_payment_link(FIXED_SUBSCRIPTION_RUB, order_id, message.from_user.id, message.from_user.username or "")

		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å (–°–ë–ü)", url=payment_link))
		keyboard.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{order_id}"))

		await message.answer(
			"–û—Ç–ª–∏—á–Ω–æ! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤ —Ä–∞–∑–º–µ—Ä–µ 200 —Ä—É–±–ª–µ–π.",
			reply_markup=keyboard
		)
		await OrderStates.waiting_for_payment.set()

	except ValueError:
		await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")
	except Exception as e:
		logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞: {e}")
		await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

@dp.callback_query_handler(lambda c: c.data.startswith("cancel_"))
async def cancel_order(callback_query: types.CallbackQuery, state: FSMContext):
	order_id = callback_query.data.replace("cancel_", "")

	if order_id in orders_db:
		del orders_db[order_id]

	if callback_query.from_user.id in pending_payments:
		del pending_payments[callback_query.from_user.id]

	await state.finish()
	await callback_query.message.edit_text("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞")
	await callback_query.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω")

@dp.callback_query_handler(lambda c: c.data.startswith("process_"))
async def process_order(callback_query: types.CallbackQuery):
	"""–ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ –∫—É–ø–∏–ª Stars –Ω–∞ Fragment."""
	if callback_query.from_user.id != ADMIN_ID:
		await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
		return

	order_id = callback_query.data.replace("process_", "")
	if order_id not in orders_db:
		await callback_query.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
		return

	order = orders_db[order_id]
	order["status"] = "completed"
	order["completed_at"] = datetime.now().isoformat()

	# –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	try:
		text = (
			f"üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n\n"
			f"‚≠ê {order['stars_count']:,} –∑–≤—ë–∑–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{order['recipient']}.\n\n"
			f"–ë—É–¥–µ–º –∂–¥–∞—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞!"
		)
		await bot.send_message(order["user_id"], text)
	except Exception as e:
		logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

	# –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
	completion_text = (
		f"‚úÖ –ó–∞–∫–∞–∑ {order_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω.\n"
		f"–ó–∞–∫–∞–∑—á–∏–∫ —É–≤–µ–¥–æ–º–ª—ë–Ω. –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
	)

	await callback_query.message.edit_text(completion_text)
	await callback_query.answer("‚úÖ –ó–∞–∫–∞–∑ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")

@dp.callback_query_handler(lambda c: c.data.startswith("cancel_admin_"))
async def cancel_order_admin(callback_query: types.CallbackQuery):
	if callback_query.from_user.id != ADMIN_ID:
		await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
		return

	order_id = callback_query.data.replace("cancel_admin_", "")
	if order_id not in orders_db:
		await callback_query.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
		return

	order = orders_db[order_id]
	try:
		await bot.send_message(
			order["user_id"],
			"üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø—Ä–∏—á–∏–Ω–∞–º.\n\n"
			"üí∞ –°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 1‚Äì3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π."
		)
	except Exception:
		pass

	del orders_db[order_id]

	await callback_query.message.edit_text(f"‚ùå –ó–∞–∫–∞–∑ {order_id} –æ—Ç–º–µ–Ω—ë–Ω –∞–¥–º–∏–Ω–æ–º")
	await callback_query.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω")

@dp.message_handler(commands=["orders"])
async def show_orders(message: types.Message):
	if message.from_user.id != ADMIN_ID:
		return

	if not orders_db:
		await message.answer("üì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç")
		return

	text = "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:\n\n"
	for oid, o in orders_db.items():
		status_emoji = {"pending": "‚è≥", "paid": "üí∞", "completed": "‚úÖ"}.get(o["status"], "‚ùì")
		text += (
			f"{status_emoji} {oid}\n"
			f"@{o['username']} ‚Üí @{o['recipient']}\n"
			f"‚≠ê {o['stars_count']:,} | —Å—Ç–∞—Ç—É—Å: {o['status']}\n"
			f"üìÖ {o.get('created_at', 'N/A')[:16]}\n\n"
		)
	await message.answer(text)

@dp.message_handler(commands=["stats"])
async def show_stats(message: types.Message):
	if message.from_user.id != ADMIN_ID:
		return

	total_orders = len(orders_db)
	paid_orders = len([o for o in orders_db.values() if o["status"] in ["paid", "completed"]])
	completed_orders = len([o for o in orders_db.values() if o["status"] == "completed"])

	stats_text = (
		f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
		f"–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n"
		f"–û–ø–ª–∞—á–µ–Ω–Ω—ã—Ö: {paid_orders}\n"
		f"–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö: {completed_orders}\n"
		f"–ö—É—Ä—Å: {STAR_TO_RUB_RATE} —Ä—É–±./–∑–≤–µ–∑–¥–∞"
	)
	await message.answer(stats_text)

@dp.message_handler()
async def handle_other_messages(message: types.Message):
	await message.answer(
		"üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.\n"
		"üåü –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å Telegram Stars –ø–æ –ª—É—á—à–µ–º—É –∫—É—Ä—Å—É!"
	)

# ==========================
# –ó–∞–ø—É—Å–∫
# ==========================

def start_bot():
	global bot_loop
	bot_loop = asyncio.new_event_loop()
	asyncio.set_event_loop(bot_loop)
	executor.start_polling(dp, skip_updates=True)

def start_web():
	app.run(host="0.0.0.0", port=PORT, debug=False)

if __name__ == "__main__":
	# –ë–æ—Ç ‚Äî –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
	bot_thread = threading.Thread(target=start_bot, daemon=True)
	bot_thread.start()

	logging.info("üöÄ Telegram Stars Bot –∑–∞–ø—É—â–µ–Ω!")

	# Flask ‚Äî –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è Railway)
	start_web()
