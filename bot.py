import asyncio
import hashlib
import hmac
import logging
import json
import time
import os
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from flask import Flask, request, jsonify
import threading
import requests
import re
import uuid

# =============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ò - –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø
# =============================================================================

# Telegram Bot
BOT_TOKEN = "8309652807:AAGm9d0lWcUcqonxFOgXruXpHDxE2ClUwfI"
ADMIN_ID = 8127196287

# Lava –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–æ–±—ã—á–Ω—ã–π –∫–æ—à–µ–ª–µ–∫)
LAVA_WALLET_ID = "R10230965"
LAVA_SECRET_KEY = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1aWQiOiIwYTk1MjRjZS03N2U2LWYyZGEtYmUyZi04MGE3MmFiYzlkNjgiLCJ0aWQiOiJmOGZmNGYxMC1iMmI4LWE0OGUtYWM5Yi03N2VjYTZiOGM4Y2EifQ.mIHVVhObUQVWcsCYNdTBRsc4slHON0-DLpj6kVFDi6Y"
# –ö—É—Ä—Å –∑–≤–µ–∑–¥—ã –∫ —Ä—É–±–ª—é
STAR_TO_RUB_RATE = 1.2

# –î–æ–º–µ–Ω –¥–ª—è webhook
DOMAIN = "tg-stars-bot-production-c736.up.railway.app"

# –ü–æ—Ä—Ç –¥–ª—è Flask (Railway –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é PORT)
PORT = 5000

# =============================================================================

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE" or not BOT_TOKEN:
    logging.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN!")
    print("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    exit(1)

if ADMIN_ID == 123456789:
    logging.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω ADMIN_ID!")
    print("‚ùå –û—à–∏–±–∫–∞: ADMIN_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

print(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
print(f"üì± BOT_TOKEN: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if BOT_TOKEN and BOT_TOKEN != 'YOUR_BOT_TOKEN_HERE' else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
print(f"üë§ ADMIN_ID: {ADMIN_ID}")
print(f"ÔøΩÔøΩ LAVA_WALLET_ID: {'‚úÖ ' + LAVA_WALLET_ID if LAVA_WALLET_ID != 'YOUR_WALLET_ID' else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
print(f"üåê DOMAIN: {DOMAIN}")
print(f"üîå PORT: {PORT}")

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class OrderStates(StatesGroup):
    waiting_for_recipient = State()
    waiting_for_payment = State()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
orders_db = {}

def generate_lava_signature(data_string, secret_key):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å—å –¥–ª—è Lava API"""
    sign_string = data_string + secret_key
    return hashlib.sha256(sign_string.encode('utf-8')).hexdigest()

def verify_lava_signature(data, received_signature, secret_key):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å—å –æ—Ç Lava"""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
        sign_data = []
        for key in sorted(data.keys()):
            if key != 'signature':
                sign_data.append(str(data[key]))
        
        sign_string = ':'.join(sign_data)
        expected_signature = generate_lava_signature(sign_string, secret_key)
        
        logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏: –ø–æ–ª—É—á–µ–Ω–∞={received_signature}, –æ–∂–∏–¥–∞–µ—Ç—Å—è={expected_signature}")
        return hmac.compare_digest(received_signature, expected_signature)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏: {e}")
        return False

def check_username_exists(username):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ username"""
    try:
        clean_username = username.replace('@', '')
        if re.match(r'^[a-zA-Z][a-zA-Z0-9_]{4,31}$', clean_username):
            return True
        return False
    except:
        return False

def calculate_cost(stars_count):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–≤–µ–∑–¥ –≤ —Ä—É–±–ª—è—Ö"""
    return round(stars_count * STAR_TO_RUB_RATE, 2)

def create_lava_invoice(amount, order_id, user_id):
    """–°–æ–∑–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Lava"""
    try:
        if LAVA_WALLET_ID == 'YOUR_WALLET_ID' or LAVA_SECRET_KEY == 'YOUR_SECRET_KEY':
            logging.error("‚ùå Lava –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!")
            return None
            
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
        sign_string = f"{amount}:{order_id}:{LAVA_WALLET_ID}"
        signature = generate_lava_signature(sign_string, LAVA_SECRET_KEY)
        
        # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É
        comment = f"–ü–æ–∫—É–ø–∫–∞ {orders_db[order_id]['stars_count']} –∑–≤–µ–∑–¥ –¥–ª—è @{orders_db[order_id]['recipient']}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –æ–ø–ª–∞—Ç—ã
        payment_url = (
            f"https://lava.ru/pay/{LAVA_WALLET_ID}"
            f"?amount={amount}"
            f"&order_id={order_id}"
            f"&comment={comment[:100]}"
            f"&success_url={DOMAIN}/success"
            f"&fail_url={DOMAIN}/failed"
            f"&signature={signature}"
        )
        
        logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {payment_url}")
        return payment_url
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ Lava: {e}")
        return None

# =============================================================================
# FLASK ROUTES
# =============================================================================

@app.route('/webhook/lava', methods=['POST'])
def lava_webhook():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç Lava"""
    try:
        logging.info(f"ÔøΩÔøΩ –ü–æ–ª—É—á–µ–Ω webhook –æ—Ç Lava")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ POST –∑–∞–ø—Ä–æ—Å–∞
        if request.content_type and 'application/json' in request.content_type:
            data = request.get_json()
            logging.info(f"ÔøΩÔøΩ JSON –¥–∞–Ω–Ω—ã–µ: {data}")
        else:
            data = request.form.to_dict()
            logging.info(f"ÔøΩÔøΩ Form –¥–∞–Ω–Ω—ã–µ: {data}")
        
        if not data:
            logging.error("‚ùå –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ webhook")
            return jsonify({"error": "Empty data"}), 400
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å
        signature = data.get('signature')
        if not signature:
            logging.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å—å –≤ webhook")
            return jsonify({"error": "Missing signature"}), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
        if not verify_lava_signature(data, signature, LAVA_SECRET_KEY):
            logging.error("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å webhook")
            return jsonify({"error": "Invalid signature"}), 400
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
        order_id = data.get('order_id')
        status = data.get('status')
        amount = float(data.get('amount', 0))
        
        logging.info(f"üí≥ Webhook –¥–∞–Ω–Ω—ã–µ: order_id={order_id}, status={status}, amount={amount}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
        if order_id and order_id in orders_db and status in ['success', 'paid', 'complete']:
            order = orders_db[order_id]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É
            if amount >= (order['cost'] * 0.95):  # 95% –æ—Ç —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞
                order['status'] = 'paid'
                order['paid_at'] = datetime.now().isoformat()
                order['paid_amount'] = amount
                
                logging.info(f"‚úÖ –ó–∞–∫–∞–∑ {order_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø–ª–∞—Ç–µ–∂–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                def notify_async():
                    try:
                        loop = asyncio.new_event_loop()
                        asyncio.set_event_loop(loop)
                        loop.run_until_complete(notify_payment_success(order['user_id'], order_id))
                        loop.close()
                    except Exception as e:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏: {e}")
                
                threading.Thread(target=notify_async, daemon=True).start()
            else:
                logging.warning(f"‚ö†Ô∏è –ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∞—è —Å—É–º–º–∞: –ø–æ–ª—É—á–µ–Ω–æ {amount}, –æ–∂–∏–¥–∞–ª–æ—Å—å {order['cost']}")
        elif not order_id:
            logging.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç order_id –≤ webhook")
        elif order_id not in orders_db:
            logging.warning(f"‚ö†Ô∏è –ó–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
        else:
            logging.info(f"‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {status} (–Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è)")
        
        return jsonify({"status": "ok"})
    
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ Lava webhook: {e}")
        return jsonify({"error": "Internal error"}), 500

@app.route('/webhook/lava', methods=['GET'])
def lava_webhook_get():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ webhook'–∞"""
    return jsonify({"status": "webhook_active", "message": "Lava webhook endpoint"})

@app.route('/success')
def success_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
    return '''
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞</title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <style>
            body { 
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Arial, sans-serif;
                text-align: center; 
                padding: 20px; 
                background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);
                color: white;
                margin: 0;
                min-height: 100vh;
                display: flex;
                flex-direction: column;
                justify-content: center;
            }
            .container { 
                background: rgba(255,255,255,0.1); 
                padding: 40px 20px; 
                border-radius: 20px;
                backdrop-filter: blur(10px);
                box-shadow: 0 8px 32px rgba(0,0,0,0.3);
                max-width: 500px;
                margin: 0 auto;
            }
            .success { font-size: 64px; margin-bottom: 20px; }
            h1 { margin: 20px 0; font-size: 28px; }
            p { font-size: 18px; margin: 10px 0; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="success">‚úÖ</div>
            <h1>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</h1>
            <p>–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É</p>
            <p>–û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–æ—Ç–µ</p>
        </div>
    </body>
    </html>
    '''

@app.route('/failed')
def failed_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ—É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
    return '''
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã</title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <style>
            body { 
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Arial, sans-serif;
                text-align: center; 
                padding: 20px; 
                background: linear-gradient(135deg, #f44336 0%, #d32f2f 100%);
                color: white;
                margin: 0;
                min-height: 100vh;
                display: flex;
                flex-direction: column;
                justify-content: center;
            }
            .container { 
                background: rgba(255,255,255,0.1); 
                padding: 40px 20px; 
                border-radius: 20px;
                backdrop-filter: blur(10px);
                box-shadow: 0 8px 32px rgba(0,0,0,0.3);
                max-width: 500px;
                margin: 0 auto;
            }
            .error { font-size: 64px; margin-bottom: 20px; }
            h1 { margin: 20px 0; font-size: 28px; }
            p { font-size: 18px; margin: 10px 0; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="error">‚ùå</div>
            <h1>–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã</h1>
            <p>–ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω</p>
            <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑</p>
        </div>
    </body>
    </html>
    '''

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return jsonify({
        "status": "running",
        "message": "Telegram Stars Bot —Å Lava –∫–æ—à–µ–ª—å–∫–æ–º",
        "version": "2.1",
        "timestamp": datetime.now().isoformat(),
        "config": {
            "bot_token": "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if BOT_TOKEN and BOT_TOKEN != 'YOUR_BOT_TOKEN_HERE' else "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
            "admin_id": ADMIN_ID,
            "lava_wallet": "‚úÖ " + LAVA_WALLET_ID if LAVA_WALLET_ID != 'YOUR_WALLET_ID' else "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
            "domain": DOMAIN,
            "port": PORT
        }
    })

@app.route('/health')
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    return jsonify({
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "orders_count": len(orders_db),
        "active_orders": len([o for o in orders_db.values() if o['status'] == 'pending']),
        "paid_orders": len([o for o in orders_db.values() if o['status'] == 'paid']),
        "completed_orders": len([o for o in orders_db.values() if o['status'] == 'completed'])
    })

# =============================================================================
# TELEGRAM BOT HANDLERS
# =============================================================================

async def notify_payment_success(user_id, order_id):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ"""
    try:
        order = orders_db.get(order_id)
        if not order:
            logging.error(f"‚ùå –ó–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            return
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.send_message(
            user_id,
            "‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
            "üîÑ –í–∞—à –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É\n"
            "‚è∞ –û–∂–∏–¥–∞–π—Ç–µ 5-10 –º–∏–Ω—É—Ç\n"
            "üì± –ü–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏",
            parse_mode='HTML'
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            types.InlineKeyboardButton(
                "‚úÖ –û—Ç–ø—Ä–∞–≤–∏–ª –∑–≤—ë–∑–¥—ã", 
                callback_data=f"process_{order_id}"
            ),
            types.InlineKeyboardButton(
                "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", 
                callback_data=f"cancel_admin_{order_id}"
            )
        )
        
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è Fragment
        fragment_url = f"https://fragment.com/stars/buy?recipient={order['recipient']}&quantity={order['stars_count']}"
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        admin_message = (
            f"ÔøΩÔøΩ <b>–ù–û–í–´–ô –û–ü–õ–ê–ß–ï–ù–ù–´–ô –ó–ê–ö–ê–ó!</b>\n\n"
            f"ÔøΩÔøΩ <b>ID:</b> <code>{order_id}</code>\n"
            f"ÔøΩÔøΩ <b>–û—Ç:</b> @{order['username']} ({order['user_id']})\n"
            f"üéØ <b>–ö–æ–º—É:</b> @{order['recipient']}\n"
            f"‚≠ê <b>–ó–≤—ë–∑–¥:</b> {order['stars_count']:,}\n"
            f"ÔøΩÔøΩ <b>–û–ø–ª–∞—á–µ–Ω–æ:</b> {order['cost']} —Ä—É–±.\n"
            f"üìÖ <b>–í—Ä–µ–º—è:</b> {order.get('paid_at', 'N/A')[:16].replace('T', ' ')}\n\n"
            f"üöÄ <b>–ò–ù–°–¢–†–£–ö–¶–ò–Ø:</b>\n"
            f"1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ: <a href='{fragment_url}'>Fragment.com</a>\n"
            f"2Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É –≤ –∫–æ—à–µ–ª—å–∫–µ\n"
            f"3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ '‚úÖ –û—Ç–ø—Ä–∞–≤–∏–ª –∑–≤—ë–∑–¥—ã'\n\n"
            f"üì± <b>–ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞:</b>\n<code>{fragment_url}</code>"
        )
        
        await bot.send_message(
            ADMIN_ID,
            admin_message,
            reply_markup=keyboard,
            parse_mode='HTML',
            disable_web_page_preview=False
        )
        
        logging.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ–± –æ–ø–ª–∞—Ç–µ: {e}")

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        logging.info(f"üì± –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç @{message.from_user.username} ({message.from_user.id})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º username
        if not message.from_user.username:
            await message.answer(
                "‚ùå <b>–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç username –≤ Telegram!</b>\n\n"
                "ÔøΩÔøΩ <b>–ö–∞–∫ –µ–≥–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å:</b>\n"
                "1Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                "2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π username\n"
                "3Ô∏è‚É£ –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ /start\n\n"
                "‚ö†Ô∏è Username –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º!",
                parse_mode='HTML'
            )
            return
        
        await state.finish()
        
        welcome_text = (
            "üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ StarsSeller!</b>\n\n"
            "ÔøΩÔøΩ –ü–æ–∫—É–ø–∞–π—Ç–µ –∏ –¥–∞—Ä–∏—Ç–µ –∑–≤—ë–∑–¥—ã Telegram –ø–æ –ª—É—á—à–µ–º—É –∫—É—Ä—Å—É!\n\n"
            f"ÔøΩÔøΩ <b>–ö—É—Ä—Å:</b> 1 ‚≠ê = {STAR_TO_RUB_RATE} —Ä—É–±.\n"
            f"‚ö° <b>–ö–æ–º–∏—Å—Å–∏—è:</b> 0%\n"
            f"ÔøΩÔøΩ <b>–°–∫–æ—Ä–æ—Å—Ç—å:</b> 5-10 –º–∏–Ω—É—Ç\n"
            f"ÔøΩÔøΩ <b>–û–ø–ª–∞—Ç–∞:</b> –ö–∞—Ä—Ç—ã, –°–ë–ü, QIWI, –ÆMoney\n\n"
            f"‚ú® <b>–ù–∞—á–Ω–µ–º?</b>"
        )
        
        await message.answer(welcome_text, parse_mode='HTML')
        
        await OrderStates.waiting_for_recipient.set()
        await message.answer(
            "üìù <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–∫–∞–∑–∞:</b>\n\n"
            "üìã <b>–§–æ—Ä–º–∞—Ç:</b> <code>@username –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</code>\n"
            "üìå <b>–ü—Ä–∏–º–µ—Ä:</b> <code>@durov 100</code>\n\n"
            "üí° <b>–ì–¥–µ:</b>\n"
            "‚Ä¢ <code>@username</code> - –ø–æ–ª—É—á–∞—Ç–µ–ª—å –∑–≤—ë–∑–¥\n"
            "‚Ä¢ <code>–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</code> - —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10,000\n\n"
            "‚ö†Ô∏è Username –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ Telegram!",
            parse_mode='HTML'
        )
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ start_handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message_handler(state=OrderStates.waiting_for_recipient)
async def process_recipient(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤—ë–∑–¥"""
    try:
        logging.info(f"üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ –æ—Ç @{message.from_user.username}: {message.text}")
        
        parts = message.text.strip().split()
        if len(parts) != 2:
            await message.answer(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
                "üìã <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ:</b> <code>@username –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</code>\n"
                "üìå <b>–ü—Ä–∏–º–µ—Ä:</b> <code>@durov 100</code>",
                parse_mode='HTML'
            )
            return
        
        recipient_username = parts[0].replace('@', '')
        stars_count = int(parts[1])
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        if stars_count <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
            return
            
        if stars_count > 10000:
            await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –∑–∞ —Ä–∞–∑: 10,000")
            return
        
        if stars_count < 1:
            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥: 1")
            return
            
        if not check_username_exists(recipient_username):
            await message.answer(
                "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username!</b>\n\n"
                "üìù <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ username:</b>\n"
                "‚Ä¢ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –±—É–∫–≤—ã\n"
                "‚Ä¢ 5-32 —Å–∏–º–≤–æ–ª–∞\n"
                "‚Ä¢ –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è\n\n"
                "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b> <code>@durov</code>, <code>@telegram</code>",
                parse_mode='HTML'
            )
            return
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
        cost = calculate_cost(stars_count)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order_id = f"order_{message.from_user.id}_{int(time.time())}"
        
        order_data = {
            'user_id': message.from_user.id,
            'username': message.from_user.username,
            'recipient': recipient_username,
            'stars_count': stars_count,
            'cost': cost,
            'order_id': order_id,
            'status': 'pending',
            'created_at': datetime.now().isoformat()
        }
        
        orders_db[order_id] = order_data
        logging.info(f"üíæ –°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑: {order_id}")
        
        # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –≤ Lava
        payment_url = create_lava_invoice(cost, order_id, message.from_user.id)
        
        if not payment_url:
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
            )
            return
        
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            types.InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url),
            types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{order_id}")
        )
        
        order_text = (
            f"‚úÖ <b>–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            f"üìã <b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:</b>\n"
            f"ÔøΩÔøΩ <code>{order_id}</code>\n"
            f"üë§ <b>–û—Ç:</b> @{message.from_user.username}\n"
            f"üéØ <b>–ö–æ–º—É:</b> @{recipient_username}\n"
            f"‚≠ê <b>–ó–≤—ë–∑–¥:</b> {stars_count:,}\n"
            f"ÔøΩÔøΩ <b>–ö –æ–ø–ª–∞—Ç–µ:</b> {cost} —Ä—É–±–ª–µ–π\n\n"
            f"üí≥ <b>–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:</b>\n"
            f"‚Ä¢ ÔøΩÔøΩ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã\n"
            f"‚Ä¢ ÔøΩÔøΩ –°–ë–ü (–±—ã—Å—Ç—Ä—ã–µ –ø–ª–∞—Ç–µ–∂–∏)\n"
            f"‚Ä¢ üíº QIWI –∫–æ—à–µ–ª–µ–∫\n"
            f"‚Ä¢ üíõ –ÆMoney\n\n"
            f"‚ö° <b>–ù–∞–∂–º–∏—Ç–µ '–û–ø–ª–∞—Ç–∏—Ç—å' –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ</b>"
        )
        
        await message.answer(order_text, reply_markup=keyboard, parse_mode='HTML')
        await OrderStates.waiting_for_payment.set()
        
        logging.info(f"‚úÖ –ó–∞–∫–∞–∑ {order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        
    except ValueError:
        await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º!")
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞: {e}")

@dp.callback_query_handler(lambda c: c.data.startswith('cancel_'), state='*')
async def cancel_order(callback_query: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    try:
        order_id = callback_query.data.replace('cancel_', '')
        logging.info(f"‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ {order_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        
        if order_id in orders_db:
            del orders_db[order_id]
        
        await state.finish()
        await callback_query.message.edit_text(
            "‚ùå <b>–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n"
            "üí° –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ /start",
            parse_mode='HTML'
        )
        await callback_query.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω")
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ")

@dp.callback_query_handler(lambda c: c.data.startswith('process_'))
async def process_order(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–æ–º"""
    try:
        if callback_query.from_user.id != ADMIN_ID:
            await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        order_id = callback_query.data.replace('process_', '')
        logging.info(f"‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ {order_id} –∞–¥–º–∏–Ω–æ–º")
        
        if order_id not in orders_db:
            await callback_query.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        order = orders_db[order_id]
        
        if order['status'] != 'paid':
            await callback_query.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –æ–ø–ª–∞—á–µ–Ω", show_alert=True)
            return
        
        order['status'] = 'completed'
        order['completed_at'] = datetime.now().isoformat()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            success_text = (
                f"üéâ <b>–ó–≤—ë–∑–¥—ã –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã!</b>\n\n"
                f"‚úÖ <b>{order['stars_count']:,} –∑–≤—ë–∑–¥</b> —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã "
                f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b>@{order['recipient']}</b>\n\n"
                f"‚ö° –ó–≤—ë–∑–¥—ã —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—é\n"
                f"üïí –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {datetime.now().strftime('%d.%m.%Y –≤ %H:%M')}\n\n"
                f"ÔøΩÔøΩ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</b>\n"
                f"üí´ –ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞"
            )
            
            await bot.send_message(order['user_id'], success_text, parse_mode='HTML')
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        completion_text = (
            f"‚úÖ <b>–ó–ê–ö–ê–ó –û–ë–†–ê–ë–û–¢–ê–ù</b>\n\n"
            f"ÔøΩÔøΩ <b>ID:</b> <code>{order_id}</code>\n"
            f"ÔøΩÔøΩ <b>–ó–∞–∫–∞–∑—á–∏–∫:</b> @{order['username']}\n"
            f"ÔøΩÔøΩ <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> @{order['recipient']}\n"
            f"‚≠ê <b>–ó–≤—ë–∑–¥:</b> {order['stars_count']:,}\n"
            f"üí∞ <b>–°—É–º–º–∞:</b> {order['cost']} —Ä—É–±.\n"
            f"‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –ó–∞–≤–µ—Ä—à–µ–Ω\n"
            f"‚è∞ <b>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        
        await callback_query.message.edit_text(completion_text, parse_mode='HTML')
        await callback_query.answer("‚úÖ –ó–∞–∫–∞–∑ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –∫–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω!")
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")

@dp.callback_query_handler(lambda c: c.data.startswith('cancel_admin_'))
async def cancel_order_admin(callback_query: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–æ–º"""
    try:
        if callback_query.from_user.id != ADMIN_ID:
            await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        order_id = callback_query.data.replace('cancel_admin_', '')
        logging.info(f"‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ {order_id} –∞–¥–º–∏–Ω–æ–º")
        
        if order_id not in orders_db:
            await callback_query.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        order = orders_db[order_id]
        
        try:
            await bot.send_message(
                order['user_id'],
                "ÔøΩÔøΩ <b>–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n"
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø—Ä–∏—á–∏–Ω–∞–º.\n\n"
                "ÔøΩÔøΩ <b>–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤:</b>\n"
                "–°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 1-3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π\n\n"
                "üìû –ü—Ä–∏ –≤–æ–ø—Ä–æ—Å–∞—Ö –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
                parse_mode='HTML'
            )
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –æ—Ç–º–µ–Ω–µ: {e}")
        
        del orders_db[order_id]
        
        await callback_query.message.edit_text(
            f"‚ùå <b>–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n"
            f"üìã ID: <code>{order_id}</code>\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: @{order['username']}\n"
            f"üí∞ –°—É–º–º–∞: {order['cost']} —Ä—É–±.\n"
            f"‚è∞ –û—Ç–º–µ–Ω–µ–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
            parse_mode='HTML'
        )
        await callback_query.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω, –∫–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω")
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–æ–º: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã")

@dp.message_handler(commands=['orders'])
async def show_orders(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
    try:
        if message.from_user.id != ADMIN_ID:
            return
        
        if not orders_db:
            await message.answer("üì≠ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç</b>", parse_mode='HTML')
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        pending_orders = [o for o in orders_db.values() if o['status'] == 'pending']
        paid_orders = [o for o in orders_db.values() if o['status'] == 'paid']
        completed_orders = [o for o in orders_db.values() if o['status'] == 'completed']
        
        orders_text = f"ÔøΩÔøΩ <b>–ê–ö–¢–ò–í–ù–´–ï –ó–ê–ö–ê–ó–´ ({len(orders_db)})</b>\n\n"
        
        if paid_orders:
            orders_text += "ÔøΩÔøΩ <b>–¢–†–ï–ë–£–Æ–¢ –û–ë–†–ê–ë–û–¢–ö–ò:</b>\n"
            for order in paid_orders[-5:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
                orders_text += (
                    f"üî• <code>{order['order_id']}</code>\n"
                    f"üë§ @{order['username']} ‚Üí @{order['recipient']}\n"
                    f"‚≠ê {order['stars_count']:,} | üí∞ {order['cost']} —Ä—É–±.\n\n"
                )
        
        if pending_orders:
            orders_text += "‚è≥ <b>–û–ñ–ò–î–ê–Æ–¢ –û–ü–õ–ê–¢–´:</b>\n"
            for order in pending_orders[-3:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3
                orders_text += (
                    f"‚è∞ <code>{order['order_id']}</code>\n"
                    f"üë§ @{order['username']} ‚Üí @{order['recipient']}\n"
                    f"‚≠ê {order['stars_count']:,} | üí∞ {order['cost']} —Ä—É–±.\n\n"
                )
        
        if completed_orders:
            orders_text += f"‚úÖ <b>–ó–ê–í–ï–†–®–ï–ù–û:</b> {len(completed_orders)}\n\n"
        
        await message.answer(orders_text[:4000], parse_mode='HTML')
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∑–∞–∫–∞–∑–æ–≤: {e}")

@dp.message_handler(commands=['stats'])
async def show_stats(message: types.Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
    try:
        if message.from_user.id != ADMIN_ID:
            return
        
        total_orders = len(orders_db)
        pending_orders = len([o for o in orders_db.values() if o['status'] == 'pending'])
        paid_orders = len([o for o in orders_db.values() if o['status'] == 'paid'])
        completed_orders = len([o for o in orders_db.values() if o['status'] == 'completed'])
        
        total_revenue = sum([o['cost'] for o in orders_db.values() if o['status'] in ['paid', 'completed']])
        total_stars = sum([o['stars_count'] for o in orders_db.values() if o['status'] == 'completed'])
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today = datetime.now().date()
        today_orders = [o for o in orders_db.values() if o.get('created_at', '')[:10] == str(today)]
        today_revenue = sum([o['cost'] for o in today_orders if o['status'] in ['paid', 'completed']])
        
        stats_text = (
            f"ÔøΩÔøΩ <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê</b>\n\n"
            f"üìà <b>–û–ë–©–ê–Ø:</b>\n"
            f"üìã –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n"
            f"‚è≥ –û–∂–∏–¥–∞—é—Ç –æ–ø–ª–∞—Ç—ã: {pending_orders}\n"
            f"ÔøΩÔøΩ –¢—Ä–µ–±—É—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: {paid_orders}\n"
            f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_orders}\n\n"
            f"üíµ <b>–§–ò–ù–ê–ù–°–´:</b>\n"
            f"üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue:,.0f} —Ä—É–±.\n"
            f"ÔøΩÔøΩ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {today_revenue:,.0f} —Ä—É–±.\n"
            f"‚≠ê –ó–≤—ë–∑–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_stars:,}\n\n"
            f"‚ö° <b>–°–†–ï–î–ù–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:</b>\n"
            f"üí± –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {(total_revenue/max(1, completed_orders)):,.0f} —Ä—É–±.\n"
            f"‚≠ê –ó–≤—ë–∑–¥ –≤ –∑–∞–∫–∞–∑–µ: {(total_stars/max(1, completed_orders)):,.0f}\n\n"
            f"üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        
        await message.answer(stats_text, parse_mode='HTML')
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

@dp.message_handler(commands=['help'])
async def help_handler(message: types.Message):
    """–°–ø—Ä–∞–≤–∫–∞"""
    try:
        if message.from_user.id == ADMIN_ID:
            help_text = (
                "üîß <b>–ö–û–ú–ê–ù–î–´ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê:</b>\n\n"
                "üìã <code>/orders</code> - –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã\n"
                "ÔøΩÔøΩ <code>/stats</code> - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
                "ÔøΩÔøΩ <code>/clear</code> - –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–∫–∞–∑—ã\n"
                "‚ùì <code>/help</code> - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
                "ÔøΩÔøΩ <b>–ü–†–û–¶–ï–°–° –û–ë–†–ê–ë–û–¢–ö–ò:</b>\n"
                "1Ô∏è‚É£ –ö–ª–∏–µ–Ω—Ç –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç –∑–∞–∫–∞–∑\n"
                "2Ô∏è‚É£ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n"
                "3Ô∏è‚É£ –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ Fragment\n"
                "4Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –ø–æ–∫—É–ø–∫—É\n"
                "5Ô∏è‚É£ –ù–∞–∂–∏–º–∞–µ—Ç–µ '‚úÖ –û—Ç–ø—Ä–∞–≤–∏–ª –∑–≤—ë–∑–¥—ã'\n"
                "6Ô∏è‚É£ –ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n\n"
                "‚ö†Ô∏è <b>–í–ê–ñ–ù–û:</b> –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –∑–∞–∫–∞–∑—ã –±—ã—Å—Ç—Ä–æ!"
            )
        else:
            help_text = (
                "‚ùì <b>–°–ü–†–ê–í–ö–ê –ü–û –ë–û–¢–£</b>\n\n"
                "ÔøΩÔøΩ <b>–ö–∞–∫ –∫—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã:</b>\n"
                "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ /start\n"
                "2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ: <code>@username –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</code>\n"
                "3Ô∏è‚É£ –û–ø–ª–∞—Ç–∏—Ç–µ —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º\n"
                "4Ô∏è‚É£ –î–æ–∂–¥–∏—Ç–µ—Å—å –¥–æ—Å—Ç–∞–≤–∫–∏ (5-10 –º–∏–Ω)\n\n"
                f"ÔøΩÔøΩ <b>–ö—É—Ä—Å:</b> 1 ‚≠ê = {STAR_TO_RUB_RATE} —Ä—É–±.\n"
                f"ÔøΩÔøΩ <b>–û–ø–ª–∞—Ç–∞:</b> –ö–∞—Ä—Ç—ã, –°–ë–ü, QIWI, –ÆMoney\n"
                f"‚ö° <b>–ö–æ–º–∏—Å—Å–∏—è:</b> 0%\n\n"
                f"üìù <b>–ü—Ä–∏–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b>\n"
                f"<code>@durov 100</code> = {calculate_cost(100)} —Ä—É–±.\n\n"
                f"‚ùì <b>–í–æ–ø—Ä–æ—Å—ã?</b> –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
            )
        
        await message.answer(help_text, parse_mode='HTML')
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–ø—Ä–∞–≤–∫–∏: {e}")

@dp.message_handler(commands=['clear'])
async def clear_completed_orders(message: types.Message):
    """–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
    try:
        if message.from_user.id != ADMIN_ID:
            return
        
        completed_count = len([o for o in orders_db.values() if o['status'] == 'completed'])
        
        if completed_count == 0:
            await message.answer("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–µ—Ç")
            return
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
        now = datetime.now()
        cleared_count = 0
        
        for order_id, order in list(orders_db.items()):
            if order['status'] == 'completed' and order.get('completed_at'):
                try:
                    completed_time = datetime.fromisoformat(order['completed_at'])
                    if (now - completed_time).total_seconds() > 86400:  # 24 —á–∞—Å–∞
                        del orders_db[order_id]
                        cleared_count += 1
                except:
                    continue
        
        await message.answer(
            f"üßπ <b>–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
            f"–£–¥–∞–ª–µ–Ω–æ {cleared_count} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤",
            parse_mode='HTML'
        )
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")

@dp.message_handler(commands=['test'])
async def test_handler(message: types.Message):
    """–¢–µ—Å—Ç –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
    try:
        if message.from_user.id != ADMIN_ID:
            return
        
        test_text = (
            f"ÔøΩÔøΩ <b>–¢–ï–°–¢ –ë–û–¢–ê</b>\n\n"
            f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
            f"‚úÖ Flask —Å–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω\n"
            f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞\n"
            f"‚úÖ Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n\n"
            f"ÔøΩÔøΩ <b>–°–¢–ê–¢–£–°:</b>\n"
            f"üîó –î–æ–º–µ–Ω: {DOMAIN}\n"
            f"üîå –ü–æ—Ä—Ç: {PORT}\n"
            f"üíæ –ó–∞–∫–∞–∑–æ–≤ –≤ –±–∞–∑–µ: {len(orders_db)}\n"
            f"‚è∞ –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n\n"
            f"ÔøΩÔøΩ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!"
        )
        
        await message.answer(test_text, parse_mode='HTML')
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")

@dp.message_handler(content_types=['text'])
async def handle_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        current_state = await state.get_state()
        
        if current_state is None:
            await message.answer(
                "ÔøΩÔøΩ –ü—Ä–∏–≤–µ—Ç! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /start\n"
                "‚ùì –ü–æ–º–æ—â—å: /help"
            )
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@dp.errors_handler()
async def errors_handler(update, exception):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞"""
    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {exception}")
    return True

# =============================================================================
# –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# =============================================================================

def run_flask():
    """–ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    try:
        logging.info(f"üöÄ –ó–∞–ø—É—Å–∫ Flask –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
        app.run(host='0.0.0.0', port=PORT, debug=False, use_reloader=False)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ Flask: {e}")

async def test_bot_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API"""
    try:
        me = await bot.get_me()
        logging.info(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{me.username} ({me.first_name})")
        print(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{me.username}")
        return True
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É: {e}")
        return False

def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API
        loop = asyncio.get_event_loop()
        if not loop.run_until_complete(test_bot_connection()):
            logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram API")
            return
        
        logging.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        print("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        executor.start_polling(dp, skip_updates=True)
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    print("=" * 50)
    print("ÔøΩÔøΩ –ó–ê–ü–£–°–ö TELEGRAM STARS BOT")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    print(f"üì± BOT_TOKEN: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if BOT_TOKEN and BOT_TOKEN != 'YOUR_BOT_TOKEN_HERE' else '‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")
    print(f"üë§ ADMIN_ID: {ADMIN_ID}")
    print(f"ÔøΩÔøΩ LAVA_WALLET_ID: {'‚úÖ ' + LAVA_WALLET_ID if LAVA_WALLET_ID != 'YOUR_WALLET_ID' else '‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")
    print(f"üîê LAVA_SECRET_KEY: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if LAVA_SECRET_KEY != 'YOUR_SECRET_KEY' else '‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")
    print(f"üåê DOMAIN: {DOMAIN}")
    print(f"ÔøΩÔøΩ PORT: {PORT}")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE" or not BOT_TOKEN:
        print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("ÔøΩÔøΩ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
        exit(1)
    
    if ADMIN_ID == 123456789:
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: ADMIN_ID –Ω–µ –∏–∑–º–µ–Ω–µ–Ω!")
        print("üìù –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π ADMIN_ID")
    
    if LAVA_WALLET_ID == 'YOUR_WALLET_ID' or LAVA_SECRET_KEY == 'YOUR_SECRET_KEY':
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Lava –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!")
        print("üìù –ü–ª–∞—Ç–µ–∂–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥—É—Ç")
    
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        print("ÔøΩÔøΩ –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞...")
        flask_thread = threading.Thread(target=run_flask, daemon=True)
        flask_thread.start()
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Flask
        time.sleep(2)
        
        print(f"üåê Flask –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:{PORT}")
        print(f"üîó Webhook URL: {DOMAIN}")
        print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        run_bot()
        
    except KeyboardInterrupt:
        print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        logging.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

# =============================================================================
# –§–ê–ô–õ–´ –î–õ–Ø RAILWAY –î–ï–ü–õ–û–Ø
# =============================================================================
